<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="projectMapper">
	<resultMap id="projectResult" type="Project">
		<result column="pro_no" property="proNo"/>
		<result column="git_nick" property="proWriter"/>
		<result column="pro_stack" property="proStack"/>
		<result column="pro_title" property="proTitle"/>
		<result column="pro_content" property="proContent"/>
		<result column="pro_member" property="proMember"/>
		<result column="pro_period" property="proPeriod"/>
		<result column="pro_deadline" property="deadLine"/>
		<result column="pro_start_date" property="startDate"/>
		<result column="pro_position" property="positoin"/>
		<result column="pro_status" property="proStatus"/>
		<result column="count" property="count"/>
		<result column="create_date" property="createDate"/>
	</resultMap>
	
	<resultMap id="StackResult" type="StackA">
		<result column="stack_no" property="stackNo"/>
		<result column="stack_type" property="stackType"/>
		<result column="stack_name" property="stackName"/>
		<result column="stack_img" property="stackImg"/>
	</resultMap>

	<select id="selectListCount" resultType="_int">
	select
	       count(*)
	  from project
	 where status = 'Y'
	</select>
	
	<select id="selectList" resultMap="projectResult">
	select
	       pro_no
	     , git_nick
	     , pro_stack
	     , pro_title
	     , pro_content
	     , pro_member
	     , pro_period
	     , to_char(pro_deadline, 'YYYY-MM-DD') as "pro_deadline"
	     , to_char(pro_start_date, 'YYYY-MM-DD') as "pro_start_date"
	     , pro_position
	     , pro_status
	     , count
	     , p.create_date
	  from project p
	  join member on (pro_writer = mem_id)
	 where p.status = 'Y'
	 order
	    by pro_no desc
	</select>
	
	<insert id="insertProject">
		insert
		      into project
		      (
		        pro_no
		      , pro_writer
		      , pro_stack
		      , pro_title
		      , pro_content
		      , pro_member
		      , pro_period
		      , pro_deadline
		      , pro_start_date
		      , pro_position
		      , pro_status
		      )
		      values
		      (
		        seq_pno.nextval
		      , #{proWriter}
		      , #{proStack}
		      , #{proTitle}
		      , #{proContent}
		      , #{proMember}
		      , #{proPeriod}
		      , #{deadLine}
		      , #{startDate}
		      , #{positoin}
		      , 'Y'
		      )
	</insert>
	
	<select id="selectStackList" resultMap="StackResult">
		select
		       stack_no
		     , stack_type
		     , stack_name
		     , stack_img
		  from stack	
	</select>
	
	<select id="selectSearchCount" resultType="_int">
		SELECT 
			  COUNT(*)
		  FROM project p
		 WHERE p.status = 'Y'
		<choose>
		   <when test="keyword == 'java' || keyword == 'go'">
		   		and (p.pro_stack = #{keyword} OR p.pro_stack LIKE #{keyword}|| ',%' OR p.pro_stack LIKE '%,'|| #{keyword} ||',%' OR p.pro_stack LIKE '%,'|| #{keyword})
		   </when>
		   <otherwise>
		       and p.pro_stack like '%' || #{keyword} || '%' 	    		
		   </otherwise>
	   </choose>    
		 order 
		    by pro_no desc
	</select>
	
	<select id="selectSearchList" resultMap="projectResult">
		select
		       pro_no
		     , git_nick
		     , pro_stack
		     , pro_title
		     , pro_content
		     , pro_member
		     , pro_period
		     , to_char(pro_deadline, 'YYYY-MM-DD') as "pro_deadline"
		     , to_char(pro_start_date, 'YYYY-MM-DD') as "pro_start_date"
		     , pro_position
		     , pro_status
		     , count
		     , p.create_date
		  from project p
		  join member on (pro_writer = mem_id)
		 where p.status = 'Y'
		<choose>
		   <when test="keyword == 'java' || keyword == 'go'">
		   		and (pro_stack = #{keyword} OR pro_stack LIKE #{keyword}|| ',%' OR pro_stack LIKE '%,'|| #{keyword} ||',%' OR pro_stack LIKE '%,'|| #{keyword})
		   </when>
		   <otherwise>
		       and pro_stack like '%' || #{keyword} || '%' 	    		
		   </otherwise>
	   </choose>    
		 order 
		    by pro_no desc	
	</select>
	
	<update id="increaseCount">
		update
		       project
		   set count = count + 1
		 where pro_no = #{pno}
		   and status = 'Y'
	</update>
	
	<select id="selectDetailList" resultMap="projectResult">
		select
		       pro_no
		     , git_nick
		     , pro_stack
		     , pro_title
		     , pro_content
		     , pro_member
		     , pro_period
		     , to_char(pro_deadline, 'YYYY-MM-DD') as "pro_deadline"
		     , to_char(pro_start_date, 'YYYY-MM-DD') as "pro_start_date"
		     , pro_position
		     , pro_status
		     , count
		     , p.create_date
		  from project p
		  join member on (pro_writer = mem_id)
		 where p.status = 'Y'
		   and pro_no = #{pno}
	</select>
	
	<update id="updateApplyProject">
		update member
		   set team_status = 'S'
			  , team = #{pno}
		  where mem_id = #{userId}
	</update>
	
	<update id="updateCancleProject">
		update member
		   set team_status = 'N'
			  , team = 0
		  where mem_id = #{userId}	
	</update>
	
	<update id="updateCompleteProject">
		update project
		   set pro_status = 'N'
		 where pro_writer = #{userId}
		   and pro_no = #{pno}	
	</update>
	
	<update id="updateRestartProject">
		update project
		   set pro_status = 'Y'
		 where pro_writer = #{userId}
		   and pro_no = #{pno}	
	</update>
	
	




</mapper>
